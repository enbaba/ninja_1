Microsoft Windows [Version 10.0.17763.973]
(c) 2018 Microsoft Corporation. All rights reserved.

C:\Users\enbaba>cd Desktop/codingdojo/virtualenv

C:\Users\enbaba\Desktop\codingdojo\virtualenv>call virtualenv1\Scripts\activate

(virtualenv1) C:\Users\enbaba\Desktop\codingdojo\virtualenv>cd ..\..\Assignments

(virtualenv1) C:\Users\enbaba\Desktop\Assignments>cd books

(virtualenv1) C:\Users\enbaba\Desktop\Assignments\books>python manage.py makemigrations
No changes detected

(virtualenv1) C:\Users\enbaba\Desktop\Assignments\books>python manage.py migrate
Operations to perform:
  Apply all migrations: admin, auth, contenttypes, sessions
Running migrations:
  Applying contenttypes.0001_initial... OK
  Applying auth.0001_initial... OK
  Applying admin.0001_initial... OK
  Applying admin.0002_logentry_remove_auto_add... OK
  Applying admin.0003_logentry_add_action_flag_choices... OK
  Applying contenttypes.0002_remove_content_type_name... OK
  Applying auth.0002_alter_permission_name_max_length... OK
  Applying auth.0003_alter_user_email_max_length... OK
  Applying auth.0004_alter_user_username_opts... OK
  Applying auth.0005_alter_user_last_login_null... OK
  Applying auth.0006_require_contenttypes_0002... OK
  Applying auth.0007_alter_validators_add_error_messages... OK
  Applying auth.0008_alter_user_username_max_length... OK
  Applying auth.0009_alter_user_last_name_max_length... OK
  Applying auth.0010_alter_group_name_max_length... OK
  Applying auth.0011_update_proxy_permissions... OK
  Applying sessions.0001_initial... OK

(virtualenv1) C:\Users\enbaba\Desktop\Assignments\books>python manage.py shell
Python 3.8.3 (tags/v3.8.3:6f8c832, May 13 2020, 22:20:19) [MSC v.1925 32 bit (Intel)] on win32
Type "help", "copyright", "credits" or "license" for more information.
(InteractiveConsole)
>>>  from app1.models import*
  File "<console>", line 1
    from app1.models import*
    ^
IndentationError: unexpected indent
>>> from app1.models import*
>>> book1= Book.objects.create(title='sunrise',description='amazing')
Traceback (most recent call last):
  File "<console>", line 1, in <module>
NameError: name 'Book' is not defined
>>> book1= Book.objects.create(title='c sharp',description='coding')
Traceback (most recent call last):
  File "<console>", line 1, in <module>
NameError: name 'Book' is not defined
>>> from app1.models import*
>>> book1= Book.objects.create(title='c sharp', description='coding')
Traceback (most recent call last):
  File "<console>", line 1, in <module>
NameError: name 'Book' is not defined
>>> from app1.models import Book
Traceback (most recent call last):
  File "<console>", line 1, in <module>
ImportError: cannot import name 'Book' from 'app1.models' (C:\Users\enbaba\Desktop\Assignments\books\app1\models.py)
>>> quit()

(virtualenv1) C:\Users\enbaba\Desktop\Assignments\books>pyhton manage.py makemigrations
'pyhton' is not recognized as an internal or external command,
operable program or batch file.

(virtualenv1) C:\Users\enbaba\Desktop\Assignments\books>python manage.py makemigrations
Migrations for 'app1':
  app1\migrations\0001_initial.py
    - Create model Book
    - Create model Author

(virtualenv1) C:\Users\enbaba\Desktop\Assignments\books>python manage.py migrate
Operations to perform:
  Apply all migrations: admin, app1, auth, contenttypes, sessions
Running migrations:
  Applying app1.0001_initial... OK

(virtualenv1) C:\Users\enbaba\Desktop\Assignments\books>python manage.py shell
Python 3.8.3 (tags/v3.8.3:6f8c832, May 13 2020, 22:20:19) [MSC v.1925 32 bit (Intel)] on win32
Type "help", "copyright", "credits" or "license" for more information.
(InteractiveConsole)
>>> from app1.models import*
>>> Book.objects.all()
<QuerySet []>
>>> book1= Books.objects.create(title='Csharp',description='coding')
Traceback (most recent call last):
  File "<console>", line 1, in <module>
NameError: name 'Books' is not defined
>>> book1= Book.objects.create(title='Csharp',description='coding')
>>> Book.objects.all()
<QuerySet [<Book: Book object (1)>]>
>>> Book.objects.all()
<QuerySet [<Book: Book object (1)>]>
>>> book2= Book.objects.create(title='java',description='coding')
>>> book2= Book.objects.create(title='java',description='coding')
>>>
>>> book2.title
'java'
>>> Book.objects.create(title="python",description="coding")
<Book: Book object (4)>
>>> book3= Book.objects.create(title='php',description='coding')
>>> book4= Book.objects.create(title='ruby',description='coding')
>>> author1= Author.objects.create(first_name='jane','last_name='austen')
  
>>> author1= Author.objects.create(first_name='jane',last_name='austin')
>>> author2= Author.objects.create(first_name='emily',last_name='dickinson')
>>> author3= Author.objects.create(first_name='fyodor',last_name='dostoeuksy')
>>> author4= Author.objects.create(first_name='william',last_name='shakespare')
>>> author5= Author.objects.create(first_name='lau',last_name='tzu')
>>> book1= Book.objects.get(id=4)
>>> book1.title.C#



>>> Book.objects.all()
<QuerySet [<Book: Book object (1)>, <Book: Book object (2)>, <Book: Book object (3)>, <Book: Book object (4)>, <Book: Book object (5)>, <Book: Book object (6)>]>
>>>

>>> Book.objects.all()
<QuerySet [<Book: Book object (1)>, <Book: Book object (2)>, <Book: Book object (3)>, <Book: Book object (4)>, <Book: Book object (5)>, <Book: Book object (6)>]>
>>> csharp= Book.objects.get(id=1)
>>> csharp.title='C#'
>>> csharp.save()
>>> Book.objects.all()
<QuerySet [<Book: Book object (1)>, <Book: Book object (2)>, <Book: Book object (3)>, <Book: Book object (4)>, <Book: Book object (5)>, <Book: Book object (6)>]>
>>> Book.objects.all().values()
<QuerySet [{'id': 1, 'title': 'C#', 'description': 'coding', 'created_at': datetime.datetime(2020, 7, 13, 3, 40, 46, 871254, tzinfo=<UTC>), 'updated_at': datetime.datetime(2020, 7, 14, 2, 48, 3, 375519, tzinfo=<UTC>)}, {'id': 2, 'title': 'java', 'description': 'coding', 'created_at': datetime.datetime(2020, 7, 13, 3, 44, 15, 101843, tzinfo=<UTC>), 'updated_at': datetime.datetime(2020, 7, 13, 3, 44, 15, 101843, tzinfo=<UTC>)}, {'id': 3, 'title': 'java', 'description': 'coding', 'created_at': datetime.datetime(2020, 7, 13, 3, 44, 40, 748381, tzinfo=<UTC>), 'updated_at': datetime.datetime(2020, 7, 13, 3, 44, 40, 748381, tzinfo=<UTC>)}, {'id': 4, 'title': 'python', 'description': 'coding', 'created_at': datetime.datetime(2020, 7, 13, 22, 36, 31, 434279, tzinfo=<UTC>), 'updated_at': datetime.datetime(2020, 7, 13, 22, 36, 31, 435275, tzinfo=<UTC>)}, {'id': 5, 'title': 'php', 'description': 'coding', 'created_at': datetime.datetime(2020, 7, 14, 1, 42, 18, 380590, tzinfo=<UTC>), 'updated_at': datetime.datetime(2020, 7, 14, 1, 42, 18, 380590, tzinfo=<UTC>)}, {'id': 6, 'title': 'ruby', 'description': 'coding', 'created_at': datetime.datetime(2020, 7, 14, 1, 43, 13, 400752, tzinfo=<UTC>), 'updated_at': datetime.datetime(2020, 7, 14, 1, 43, 13, 400752, tzinfo=<UTC>)}]>
>>> Author.objects.all().values()
<QuerySet [{'id': 1, 'first_name': 'jane', 'last_name': 'austin', 'notes': '', 'created_at': datetime.datetime(2020, 7, 14, 2, 1, 58, 703898, tzinfo=<UTC>), 'updated_at': datetime.datetime(2020, 7, 14, 2, 1, 58, 703898, tzinfo=<UTC>)}, {'id': 2, 'first_name': 'emily', 'last_name': 'dickinson', 'notes': '', 'created_at': datetime.datetime(2020, 7, 14, 2, 5, 0, 608135, tzinfo=<UTC>), 'updated_at': datetime.datetime(2020, 7, 14, 2, 5, 0, 608135, tzinfo=<UTC>)}, {'id': 3, 'first_name': 'fyodor', 'last_name': 'dostoeuksy', 'notes': '', 'created_at': datetime.datetime(2020, 7, 14, 2, 6, 35, 388045, tzinfo=<UTC>), 'updated_at': datetime.datetime(2020, 7, 14, 2, 6, 35, 388045, tzinfo=<UTC>)}, {'id': 4, 'first_name': 'william', 'last_name': 'shakespare', 'notes': '', 'created_at': datetime.datetime(2020, 7, 14, 2, 7, 46, 392215, tzinfo=<UTC>), 'updated_at': datetime.datetime(2020, 7, 14, 2, 7, 46, 392215, tzinfo=<UTC>)}, {'id': 5, 'first_name': 'lau', 'last_name': 'tzu', 'notes': '', 'created_at': datetime.datetime(2020, 7, 14, 2, 8, 54, 187763, tzinfo=<UTC>), 'updated_at': datetime.datetime(2020, 7, 14, 2, 8, 54, 187763, tzinfo=<UTC>)}]>
>>> williamshakespare= Author.objects.get(id=4)
>>> williamshakespare.name='bill'
>>> williamshakespare.save()
>>> book2.authors.add(Author.object.get(id=1))

>>> book2.authors.add(Author.objects.get(id=1))
>>> book3.author.add(Author.objects.get(id=2))

>>> book3.authors.add(Author.objects.get(id=2))
>>> book4.authors.add(Author.objects.get(id=3))
>>> book5.authors.add(Author.objects.get(id=4))
Traceback (most recent call last):
  File "<console>", line 1, in <module>

>>> book1.authors.add(Author.objects.get(id=4))
>>> author3= Author.objects.get(id=3)

>>> author3.delete()
(2, {'app1.Author_books': 1, 'app1.Author': 1})


>>> Book.objects.all()
<QuerySet [<Book: Book object (1)>, <Book: Book object (2)>, <Book: Book object (3)>, <Book: Book object (4)>, <Book: Book object (5)>, <Book: Book object (6)>]>
>>>

